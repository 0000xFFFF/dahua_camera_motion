#!/usr/bin/env python3
import cv2
import argparse

parser = argparse.ArgumentParser(description='dahua camera motion detection')
parser.add_argument('-ww', '--width', default=1920, metavar='<px>', type=int, help="window pixels width")
parser.add_argument('-wh', '--height', default=1080, metavar='<px>', type=int, help="window pixels height")
parser.add_argument('-fs', '--fullscreen', action="store_true", help="start window in fullscreen mode")
parser.add_argument('-i', '--ip', metavar='<ip>', type=str, help="ip to connect to")
parser.add_argument('-u', '--username', metavar='<user>', type=str, help="account username")
parser.add_argument('-p', '--password', metavar='<pass>', type=str, help="account password")
parser.add_argument('-a', '--area', default=10, metavar='<area>', type=int, help="contour area for detection (drawing rectangle)")
parser.add_argument('-pad', '--padding', default=5, metavar='<px>', type=int, help="rectangle padding")
args = parser.parse_args()

if args.fullscreen:
    cv2.namedWindow('Motion', cv2.WINDOW_NORMAL)
    cv2.setWindowProperty('Motion', cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

def motion_detection():
    """Detect motion in the RTSP stream using OpenCV."""
    rtsp_url = f"rtsp://{args.username}:{args.password}@{args.ip}:554/cam/realmonitor?channel=0&subtype=0"
    cap = cv2.VideoCapture(rtsp_url)

    if not cap.isOpened():
        print("Error: Could not open RTSP stream.")
        return

    fgbg = cv2.createBackgroundSubtractorMOG2(history=500, varThreshold=16, detectShadows=True)

    while True:
        ret, frame = cap.read()

        # Crop the frame
        crop_width = 704
        crop_height = 384
        crop_x = 0
        crop_y = 0
        frame = frame[crop_y:crop_y + crop_height, crop_x:crop_x + crop_width]

        if not ret:
            print("Error: Failed to grab frame.")
            break

        fgmask = fgbg.apply(frame)
        _, thresh = cv2.threshold(fgmask, 128, 255, cv2.THRESH_BINARY)
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        for contour in contours:
            if cv2.contourArea(contour) > args.area:
                x, y, w, h = cv2.boundingRect(contour)
                x, y, w, h = x - args.padding, y - args.padding, w + 2 * args.padding, h + 2 * args.padding
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)


        frame = cv2.resize(frame, (1800, 1000)) # resize
        cv2.imshow('Motion', frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    motion_detection()

